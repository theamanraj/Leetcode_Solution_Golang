import (
    "sort"
)

func minMalwareSpread(graph [][]int, initial []int) int {
 
    var ans int = initial[0]
    var minimumInfectedCnt int = len(graph) + 1
    sort.Ints(initial)
    
    for _, infectNode := range initial {
        infectedCnt := dfsAll(graph, initial, infectNode)
        if infectedCnt < minimumInfectedCnt {
            minimumInfectedCnt = infectedCnt
            ans = infectNode
        }
    }
    return ans
}

func dfsAll(graph [][]int, infectedNodeList []int, removeNode int) int {
    
    infected := make([]int, len(graph))
    for _, infectNode := range infectedNodeList {
        if infectNode != removeNode {
            dfs(infectNode, graph, infected)
        }
    }
    return sum(infected)
}

func dfs(curr int, graph [][]int, infected []int) {
    
    if infected[curr] == 1 {
        return
    }
    infected[curr] = 1
    for i := 0; i < len(graph); i++ {
        if i != curr && graph[curr][i] == 1 {
            dfs(i, graph, infected)
        }
    }
}

func sum(arr []int) int {
    total := 0
    for _, v := range arr {
        total += v
    }
    return total
}